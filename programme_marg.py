{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "02fe7350-6327-44a1-806e-12ec4be85c6c",
   "metadata": {},
   "outputs": [],
   "source": [
    "\"\"\"\n",
    "Le jeu du Taquin\n",
    "\"\"\"\n",
    "from numpy import array\n",
    "from random import randint, choice\n",
    "import pygame\n",
    "\"\"\"\n",
    "Définition de l'objet: Taquin()\n",
    "\"\"\"\n",
    "class Taquin:\n",
    "    def __init__(self):\n",
    "        self.plateau = array( [ [1,2,3,4], [5,6,7,8] , [9,10,11,12], [13,14,15,0] ] )\n",
    "        self.directions = [] # liste des mouvements utilisés pour mélanger le taquin\n",
    "        \n",
    "    def __str__(self):\n",
    "        return self.plateau.__str__()\n",
    "        \n",
    "    def poszero(self):\n",
    "        for y in range(4):\n",
    "            for x in range(4):\n",
    "                if self.plateau[y][x] == 0: return y,x\n",
    "                \n",
    "    def mouv_possibles(self):\n",
    "        i,j = self.poszero()\n",
    "        impossible = []\n",
    "        possible = ['G' , 'D' , 'H' , 'B']\n",
    "        if i == 0:\n",
    "            impossible.append('B')\n",
    "        if i == 3:\n",
    "            impossible.append('H')\n",
    "        if j == 0:\n",
    "            impossible.append('D')\n",
    "        if j == 3:\n",
    "            impossible.append('G')\n",
    "        \n",
    "        return [ i for i in possible if i not in impossible ]\n",
    "        \n",
    "    def bas(self):\n",
    "        i,j = self.poszero()\n",
    "        if i != 0:\n",
    "            self.plateau[i][j] = self.plateau[i-1][j]\n",
    "            self.plateau[i-1][j] = 0\n",
    "            \n",
    "    def haut(self):\n",
    "        i,j = self.poszero()\n",
    "        if i != 3:\n",
    "            self.plateau[i][j] = self.plateau[i+1][j]\n",
    "            self.plateau[i+1][j] = 0\n",
    "            \n",
    "    def gauche(self):\n",
    "        i,j = self.poszero()\n",
    "        if j != 3:\n",
    "            self.plateau[i][j] = self.plateau[i][j+1]\n",
    "            self.plateau[i][j+1] = 0\n",
    "            \n",
    "    def droite(self):\n",
    "        i,j = self.poszero()\n",
    "        if j != 0:\n",
    "            self.plateau[i][j] = self.plateau[i][j-1]\n",
    "            self.plateau[i][j-1] = 0\n",
    "            \n",
    "    def mix(self):\n",
    "        for _ in range( 10, 100 ):\n",
    "            direction = choice( self.mouv_possibles() )\n",
    "            self.directions.append(direction)\n",
    "            match direction:\n",
    "                case 'G' : self.gauche()\n",
    "                case 'D' : self.droite()\n",
    "                case 'H' : self.haut()\n",
    "                case _ : self.bas()\n",
    "                \n",
    "    def graphicplate(self, screen, win = False):\n",
    "        font = pygame.font.Font(None, 100)\n",
    "        if win:\n",
    "            color = (80,135,68)\n",
    "        else:\n",
    "            color = (40,58,82)\n",
    "        for y in range(4):\n",
    "            for x in range(4):\n",
    "                if self.plateau[y][x] != 0:\n",
    "                    pygame.draw.rect(screen, color, pygame.Rect(16+x*146, 16+y*146, 142, 142), border_radius=20)\n",
    "                    if self.plateau[y][x] < 10:\n",
    "                        dx = 0\n",
    "                    else:\n",
    "                        dx = -16\n",
    "                    screen.blit( font.render(str(self.plateau[y][x]),1,(255,255,255)) , (70+dx + 144*x , 58 + 144*y) )\n",
    "                \n",
    "    def play(self):\n",
    "        T.mix()\n",
    "        pygame.init()\n",
    "        screen = pygame.display.set_mode((610, 610))\n",
    "        pygame.display.set_caption('Le jeu du Taquin')\n",
    "        green = (9,44,28)\n",
    "        marroon = (33,21,3)\n",
    "        marroon_light = (47,32,8)\n",
    "        running = True\n",
    "        \n",
    "        \n",
    "        while running:\n",
    "            screen.fill( green )\n",
    "            pygame.draw.rect(screen, marroon, pygame.Rect(10, 10, 585, 585))\n",
    "            pygame.draw.rect(screen, marroon_light, pygame.Rect(16, 16, 584, 584))\n",
    "            \n",
    "            if (self.plateau == array( [ [1,2,3,4], [5,6,7,8] , [9,10,11,12], [13,14,15,0] ] )).all():\n",
    "                self.graphicplate(screen, win = True)\n",
    "            else:\n",
    "                self.graphicplate(screen)\n",
    "                \n",
    "            \n",
    "            # Fermeture de la fenêtre\n",
    "            for event in pygame.event.get():\n",
    "                if event.type == pygame.QUIT:\n",
    "                    running = False\n",
    "                if event.type == pygame.KEYDOWN:\n",
    "                    if event.key == pygame.K_UP:\n",
    "                        self.haut()\n",
    "                    elif event.key == pygame.K_DOWN:\n",
    "                        self.bas()\n",
    "                    elif event.key == pygame.K_LEFT:\n",
    "                        self.gauche()\n",
    "                    elif event.key == pygame.K_RIGHT:\n",
    "                        self.droite()\n",
    "                \n",
    "            pygame.display.flip()\n",
    "            \n",
    "        pygame.quit()\n",
    "                  \n",
    "        \n",
    "if __name__ == \"__main__\":\n",
    "    T = Taquin()\n",
    "    T.play()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
